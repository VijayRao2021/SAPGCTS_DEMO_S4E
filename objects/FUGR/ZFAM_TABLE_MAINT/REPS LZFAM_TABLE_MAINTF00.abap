*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 20.09.2021 at 19:12:56
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZV_FAM_FEATURE..................................*
FORM GET_DATA_ZV_FAM_FEATURE.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZFAM_FEATURE WHERE
(VIM_WHERETAB) .
    CLEAR ZV_FAM_FEATURE .
ZV_FAM_FEATURE-MANDT =
ZFAM_FEATURE-MANDT .
ZV_FAM_FEATURE-FEATURE_ID =
ZFAM_FEATURE-FEATURE_ID .
ZV_FAM_FEATURE-TEXT =
ZFAM_FEATURE-TEXT .
ZV_FAM_FEATURE-ACTIVATED =
ZFAM_FEATURE-ACTIVATED .
ZV_FAM_FEATURE-GROUP_ID =
ZFAM_FEATURE-GROUP_ID .
ZV_FAM_FEATURE-DISLOG_FG =
ZFAM_FEATURE-DISLOG_FG .
<VIM_TOTAL_STRUC> = ZV_FAM_FEATURE.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_FAM_FEATURE .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_FAM_FEATURE.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_FAM_FEATURE-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_FEATURE WHERE
  FEATURE_ID = ZV_FAM_FEATURE-FEATURE_ID .
    IF SY-SUBRC = 0.
    DELETE ZFAM_FEATURE .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_FEATURE WHERE
  FEATURE_ID = ZV_FAM_FEATURE-FEATURE_ID .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZFAM_FEATURE.
    ENDIF.
ZFAM_FEATURE-MANDT =
ZV_FAM_FEATURE-MANDT .
ZFAM_FEATURE-FEATURE_ID =
ZV_FAM_FEATURE-FEATURE_ID .
ZFAM_FEATURE-TEXT =
ZV_FAM_FEATURE-TEXT .
ZFAM_FEATURE-ACTIVATED =
ZV_FAM_FEATURE-ACTIVATED .
ZFAM_FEATURE-GROUP_ID =
ZV_FAM_FEATURE-GROUP_ID .
ZFAM_FEATURE-DISLOG_FG =
ZV_FAM_FEATURE-DISLOG_FG .
    IF SY-SUBRC = 0.
    UPDATE ZFAM_FEATURE ##WARN_OK.
    ELSE.
    INSERT ZFAM_FEATURE .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_FAM_FEATURE-UPD_FLAG,
STATUS_ZV_FAM_FEATURE-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_FAM_FEATURE.
  SELECT SINGLE * FROM ZFAM_FEATURE WHERE
FEATURE_ID = ZV_FAM_FEATURE-FEATURE_ID .
ZV_FAM_FEATURE-MANDT =
ZFAM_FEATURE-MANDT .
ZV_FAM_FEATURE-FEATURE_ID =
ZFAM_FEATURE-FEATURE_ID .
ZV_FAM_FEATURE-TEXT =
ZFAM_FEATURE-TEXT .
ZV_FAM_FEATURE-ACTIVATED =
ZFAM_FEATURE-ACTIVATED .
ZV_FAM_FEATURE-GROUP_ID =
ZFAM_FEATURE-GROUP_ID .
ZV_FAM_FEATURE-DISLOG_FG =
ZFAM_FEATURE-DISLOG_FG .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_FAM_FEATURE USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_FAM_FEATURE-FEATURE_ID TO
ZFAM_FEATURE-FEATURE_ID .
MOVE ZV_FAM_FEATURE-MANDT TO
ZFAM_FEATURE-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZFAM_FEATURE'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZFAM_FEATURE TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZFAM_FEATURE'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_FAM_PARAMETER................................*
FORM GET_DATA_ZV_FAM_PARAMETER.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZFAM_PARAMETERS WHERE
(VIM_WHERETAB) .
    CLEAR ZV_FAM_PARAMETER .
ZV_FAM_PARAMETER-MANDT =
ZFAM_PARAMETERS-MANDT .
ZV_FAM_PARAMETER-FEATURE_ID =
ZFAM_PARAMETERS-FEATURE_ID .
ZV_FAM_PARAMETER-PARAMETER_NAME =
ZFAM_PARAMETERS-PARAMETER_NAME .
ZV_FAM_PARAMETER-ITEM =
ZFAM_PARAMETERS-ITEM .
ZV_FAM_PARAMETER-PARAMETER_VALUE =
ZFAM_PARAMETERS-PARAMETER_VALUE .
ZV_FAM_PARAMETER-RULE_LEVEL =
ZFAM_PARAMETERS-RULE_LEVEL .
ZV_FAM_PARAMETER-GROUP_ID =
ZFAM_PARAMETERS-GROUP_ID .
<VIM_TOTAL_STRUC> = ZV_FAM_PARAMETER.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_FAM_PARAMETER .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_FAM_PARAMETER.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_FAM_PARAMETER-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_PARAMETERS WHERE
  FEATURE_ID = ZV_FAM_PARAMETER-FEATURE_ID AND
  PARAMETER_NAME = ZV_FAM_PARAMETER-PARAMETER_NAME AND
  ITEM = ZV_FAM_PARAMETER-ITEM .
    IF SY-SUBRC = 0.
    DELETE ZFAM_PARAMETERS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_PARAMETERS WHERE
  FEATURE_ID = ZV_FAM_PARAMETER-FEATURE_ID AND
  PARAMETER_NAME = ZV_FAM_PARAMETER-PARAMETER_NAME AND
  ITEM = ZV_FAM_PARAMETER-ITEM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZFAM_PARAMETERS.
    ENDIF.
ZFAM_PARAMETERS-MANDT =
ZV_FAM_PARAMETER-MANDT .
ZFAM_PARAMETERS-FEATURE_ID =
ZV_FAM_PARAMETER-FEATURE_ID .
ZFAM_PARAMETERS-PARAMETER_NAME =
ZV_FAM_PARAMETER-PARAMETER_NAME .
ZFAM_PARAMETERS-ITEM =
ZV_FAM_PARAMETER-ITEM .
ZFAM_PARAMETERS-PARAMETER_VALUE =
ZV_FAM_PARAMETER-PARAMETER_VALUE .
ZFAM_PARAMETERS-RULE_LEVEL =
ZV_FAM_PARAMETER-RULE_LEVEL .
ZFAM_PARAMETERS-GROUP_ID =
ZV_FAM_PARAMETER-GROUP_ID .
    IF SY-SUBRC = 0.
    UPDATE ZFAM_PARAMETERS ##WARN_OK.
    ELSE.
    INSERT ZFAM_PARAMETERS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_FAM_PARAMETER-UPD_FLAG,
STATUS_ZV_FAM_PARAMETER-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_FAM_PARAMETER.
  SELECT SINGLE * FROM ZFAM_PARAMETERS WHERE
FEATURE_ID = ZV_FAM_PARAMETER-FEATURE_ID AND
PARAMETER_NAME = ZV_FAM_PARAMETER-PARAMETER_NAME AND
ITEM = ZV_FAM_PARAMETER-ITEM .
ZV_FAM_PARAMETER-MANDT =
ZFAM_PARAMETERS-MANDT .
ZV_FAM_PARAMETER-FEATURE_ID =
ZFAM_PARAMETERS-FEATURE_ID .
ZV_FAM_PARAMETER-PARAMETER_NAME =
ZFAM_PARAMETERS-PARAMETER_NAME .
ZV_FAM_PARAMETER-ITEM =
ZFAM_PARAMETERS-ITEM .
ZV_FAM_PARAMETER-PARAMETER_VALUE =
ZFAM_PARAMETERS-PARAMETER_VALUE .
ZV_FAM_PARAMETER-RULE_LEVEL =
ZFAM_PARAMETERS-RULE_LEVEL .
ZV_FAM_PARAMETER-GROUP_ID =
ZFAM_PARAMETERS-GROUP_ID .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_FAM_PARAMETER USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_FAM_PARAMETER-FEATURE_ID TO
ZFAM_PARAMETERS-FEATURE_ID .
MOVE ZV_FAM_PARAMETER-PARAMETER_NAME TO
ZFAM_PARAMETERS-PARAMETER_NAME .
MOVE ZV_FAM_PARAMETER-ITEM TO
ZFAM_PARAMETERS-ITEM .
MOVE ZV_FAM_PARAMETER-MANDT TO
ZFAM_PARAMETERS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZFAM_PARAMETERS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZFAM_PARAMETERS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZFAM_PARAMETERS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_FAM_RULES_GR2................................*
FORM GET_DATA_ZV_FAM_RULES_GR2.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZFAM_RULES_GROUP WHERE
(VIM_WHERETAB) .
    CLEAR ZV_FAM_RULES_GR2 .
ZV_FAM_RULES_GR2-MANDT =
ZFAM_RULES_GROUP-MANDT .
ZV_FAM_RULES_GR2-GROUP_ID =
ZFAM_RULES_GROUP-GROUP_ID .
ZV_FAM_RULES_GR2-CRITERIAS_GROUP =
ZFAM_RULES_GROUP-CRITERIAS_GROUP .
ZV_FAM_RULES_GR2-CRITERIA =
ZFAM_RULES_GROUP-CRITERIA .
ZV_FAM_RULES_GR2-ITEM =
ZFAM_RULES_GROUP-ITEM .
ZV_FAM_RULES_GR2-SIGN =
ZFAM_RULES_GROUP-SIGN .
ZV_FAM_RULES_GR2-OPTI =
ZFAM_RULES_GROUP-OPTI .
ZV_FAM_RULES_GR2-LOW =
ZFAM_RULES_GROUP-LOW .
ZV_FAM_RULES_GR2-HIGH =
ZFAM_RULES_GROUP-HIGH .
<VIM_TOTAL_STRUC> = ZV_FAM_RULES_GR2.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_FAM_RULES_GR2 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_FAM_RULES_GR2.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_FAM_RULES_GR2-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_RULES_GROUP WHERE
  GROUP_ID = ZV_FAM_RULES_GR2-GROUP_ID AND
  CRITERIAS_GROUP = ZV_FAM_RULES_GR2-CRITERIAS_GROUP AND
  CRITERIA = ZV_FAM_RULES_GR2-CRITERIA AND
  ITEM = ZV_FAM_RULES_GR2-ITEM .
    IF SY-SUBRC = 0.
    DELETE ZFAM_RULES_GROUP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_RULES_GROUP WHERE
  GROUP_ID = ZV_FAM_RULES_GR2-GROUP_ID AND
  CRITERIAS_GROUP = ZV_FAM_RULES_GR2-CRITERIAS_GROUP AND
  CRITERIA = ZV_FAM_RULES_GR2-CRITERIA AND
  ITEM = ZV_FAM_RULES_GR2-ITEM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZFAM_RULES_GROUP.
    ENDIF.
ZFAM_RULES_GROUP-MANDT =
ZV_FAM_RULES_GR2-MANDT .
ZFAM_RULES_GROUP-GROUP_ID =
ZV_FAM_RULES_GR2-GROUP_ID .
ZFAM_RULES_GROUP-CRITERIAS_GROUP =
ZV_FAM_RULES_GR2-CRITERIAS_GROUP .
ZFAM_RULES_GROUP-CRITERIA =
ZV_FAM_RULES_GR2-CRITERIA .
ZFAM_RULES_GROUP-ITEM =
ZV_FAM_RULES_GR2-ITEM .
ZFAM_RULES_GROUP-SIGN =
ZV_FAM_RULES_GR2-SIGN .
ZFAM_RULES_GROUP-OPTI =
ZV_FAM_RULES_GR2-OPTI .
ZFAM_RULES_GROUP-LOW =
ZV_FAM_RULES_GR2-LOW .
ZFAM_RULES_GROUP-HIGH =
ZV_FAM_RULES_GR2-HIGH .
    IF SY-SUBRC = 0.
    UPDATE ZFAM_RULES_GROUP ##WARN_OK.
    ELSE.
    INSERT ZFAM_RULES_GROUP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_FAM_RULES_GR2-UPD_FLAG,
STATUS_ZV_FAM_RULES_GR2-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_FAM_RULES_GR2.
  SELECT SINGLE * FROM ZFAM_RULES_GROUP WHERE
GROUP_ID = ZV_FAM_RULES_GR2-GROUP_ID AND
CRITERIAS_GROUP = ZV_FAM_RULES_GR2-CRITERIAS_GROUP AND
CRITERIA = ZV_FAM_RULES_GR2-CRITERIA AND
ITEM = ZV_FAM_RULES_GR2-ITEM .
ZV_FAM_RULES_GR2-MANDT =
ZFAM_RULES_GROUP-MANDT .
ZV_FAM_RULES_GR2-GROUP_ID =
ZFAM_RULES_GROUP-GROUP_ID .
ZV_FAM_RULES_GR2-CRITERIAS_GROUP =
ZFAM_RULES_GROUP-CRITERIAS_GROUP .
ZV_FAM_RULES_GR2-CRITERIA =
ZFAM_RULES_GROUP-CRITERIA .
ZV_FAM_RULES_GR2-ITEM =
ZFAM_RULES_GROUP-ITEM .
ZV_FAM_RULES_GR2-SIGN =
ZFAM_RULES_GROUP-SIGN .
ZV_FAM_RULES_GR2-OPTI =
ZFAM_RULES_GROUP-OPTI .
ZV_FAM_RULES_GR2-LOW =
ZFAM_RULES_GROUP-LOW .
ZV_FAM_RULES_GR2-HIGH =
ZFAM_RULES_GROUP-HIGH .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_FAM_RULES_GR2 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_FAM_RULES_GR2-GROUP_ID TO
ZFAM_RULES_GROUP-GROUP_ID .
MOVE ZV_FAM_RULES_GR2-CRITERIAS_GROUP TO
ZFAM_RULES_GROUP-CRITERIAS_GROUP .
MOVE ZV_FAM_RULES_GR2-CRITERIA TO
ZFAM_RULES_GROUP-CRITERIA .
MOVE ZV_FAM_RULES_GR2-ITEM TO
ZFAM_RULES_GROUP-ITEM .
MOVE ZV_FAM_RULES_GR2-MANDT TO
ZFAM_RULES_GROUP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZFAM_RULES_GROUP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZFAM_RULES_GROUP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZFAM_RULES_GROUP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_FAM_RULES_GRP................................*
FORM GET_DATA_ZV_FAM_RULES_GRP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZFAM_RULES_GROUP WHERE
(VIM_WHERETAB) .
    CLEAR ZV_FAM_RULES_GRP .
ZV_FAM_RULES_GRP-MANDT =
ZFAM_RULES_GROUP-MANDT .
ZV_FAM_RULES_GRP-GROUP_ID =
ZFAM_RULES_GROUP-GROUP_ID .
ZV_FAM_RULES_GRP-CRITERIAS_GROUP =
ZFAM_RULES_GROUP-CRITERIAS_GROUP .
ZV_FAM_RULES_GRP-CRITERIA =
ZFAM_RULES_GROUP-CRITERIA .
ZV_FAM_RULES_GRP-ITEM =
ZFAM_RULES_GROUP-ITEM .
ZV_FAM_RULES_GRP-SIGN =
ZFAM_RULES_GROUP-SIGN .
ZV_FAM_RULES_GRP-OPTI =
ZFAM_RULES_GROUP-OPTI .
ZV_FAM_RULES_GRP-LOW =
ZFAM_RULES_GROUP-LOW .
ZV_FAM_RULES_GRP-HIGH =
ZFAM_RULES_GROUP-HIGH .
<VIM_TOTAL_STRUC> = ZV_FAM_RULES_GRP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_FAM_RULES_GRP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_FAM_RULES_GRP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_FAM_RULES_GRP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_RULES_GROUP WHERE
  GROUP_ID = ZV_FAM_RULES_GRP-GROUP_ID AND
  CRITERIAS_GROUP = ZV_FAM_RULES_GRP-CRITERIAS_GROUP AND
  CRITERIA = ZV_FAM_RULES_GRP-CRITERIA AND
  ITEM = ZV_FAM_RULES_GRP-ITEM .
    IF SY-SUBRC = 0.
    DELETE ZFAM_RULES_GROUP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZFAM_RULES_GROUP WHERE
  GROUP_ID = ZV_FAM_RULES_GRP-GROUP_ID AND
  CRITERIAS_GROUP = ZV_FAM_RULES_GRP-CRITERIAS_GROUP AND
  CRITERIA = ZV_FAM_RULES_GRP-CRITERIA AND
  ITEM = ZV_FAM_RULES_GRP-ITEM .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZFAM_RULES_GROUP.
    ENDIF.
ZFAM_RULES_GROUP-MANDT =
ZV_FAM_RULES_GRP-MANDT .
ZFAM_RULES_GROUP-GROUP_ID =
ZV_FAM_RULES_GRP-GROUP_ID .
ZFAM_RULES_GROUP-CRITERIAS_GROUP =
ZV_FAM_RULES_GRP-CRITERIAS_GROUP .
ZFAM_RULES_GROUP-CRITERIA =
ZV_FAM_RULES_GRP-CRITERIA .
ZFAM_RULES_GROUP-ITEM =
ZV_FAM_RULES_GRP-ITEM .
ZFAM_RULES_GROUP-SIGN =
ZV_FAM_RULES_GRP-SIGN .
ZFAM_RULES_GROUP-OPTI =
ZV_FAM_RULES_GRP-OPTI .
ZFAM_RULES_GROUP-LOW =
ZV_FAM_RULES_GRP-LOW .
ZFAM_RULES_GROUP-HIGH =
ZV_FAM_RULES_GRP-HIGH .
    IF SY-SUBRC = 0.
    UPDATE ZFAM_RULES_GROUP ##WARN_OK.
    ELSE.
    INSERT ZFAM_RULES_GROUP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_FAM_RULES_GRP-UPD_FLAG,
STATUS_ZV_FAM_RULES_GRP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_FAM_RULES_GRP.
  SELECT SINGLE * FROM ZFAM_RULES_GROUP WHERE
GROUP_ID = ZV_FAM_RULES_GRP-GROUP_ID AND
CRITERIAS_GROUP = ZV_FAM_RULES_GRP-CRITERIAS_GROUP AND
CRITERIA = ZV_FAM_RULES_GRP-CRITERIA AND
ITEM = ZV_FAM_RULES_GRP-ITEM .
ZV_FAM_RULES_GRP-MANDT =
ZFAM_RULES_GROUP-MANDT .
ZV_FAM_RULES_GRP-GROUP_ID =
ZFAM_RULES_GROUP-GROUP_ID .
ZV_FAM_RULES_GRP-CRITERIAS_GROUP =
ZFAM_RULES_GROUP-CRITERIAS_GROUP .
ZV_FAM_RULES_GRP-CRITERIA =
ZFAM_RULES_GROUP-CRITERIA .
ZV_FAM_RULES_GRP-ITEM =
ZFAM_RULES_GROUP-ITEM .
ZV_FAM_RULES_GRP-SIGN =
ZFAM_RULES_GROUP-SIGN .
ZV_FAM_RULES_GRP-OPTI =
ZFAM_RULES_GROUP-OPTI .
ZV_FAM_RULES_GRP-LOW =
ZFAM_RULES_GROUP-LOW .
ZV_FAM_RULES_GRP-HIGH =
ZFAM_RULES_GROUP-HIGH .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_FAM_RULES_GRP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_FAM_RULES_GRP-GROUP_ID TO
ZFAM_RULES_GROUP-GROUP_ID .
MOVE ZV_FAM_RULES_GRP-CRITERIAS_GROUP TO
ZFAM_RULES_GROUP-CRITERIAS_GROUP .
MOVE ZV_FAM_RULES_GRP-CRITERIA TO
ZFAM_RULES_GROUP-CRITERIA .
MOVE ZV_FAM_RULES_GRP-ITEM TO
ZFAM_RULES_GROUP-ITEM .
MOVE ZV_FAM_RULES_GRP-MANDT TO
ZFAM_RULES_GROUP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZFAM_RULES_GROUP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZFAM_RULES_GROUP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZFAM_RULES_GROUP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .